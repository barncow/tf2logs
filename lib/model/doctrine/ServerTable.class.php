<?php

/**
 * ServerTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ServerTable extends Doctrine_Table {
    /**
     * Returns an instance of this class.
     *
     * @return object ServerTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Server');
    }
    
    /**
      Checks if the given IP and port combination are being used by another active user. If it is, return true, else false.
    */
    public function isAddressUsed($ip, $port) {
      if(!$ip || !$port) throw new IllegalArgumentException('IP and port cannot be null for isAddressUsed method.');
      
      $q = $this
        ->createQuery('s')
        ->select('count(s.id)')
        ->where('s.ip = ?', $ip)
      ->andWhere('s.port = ?', $port)
      ->andWhere('s.status != ?', Server::STATUS_INACTIVE);

      $c = (int) $q->fetchOne(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
      
      return $c != 0;
    }
    
    /**
      Finds a server in need of verifying by its (or its server_group's) slug.
    */
    public function findVerifyServerBySlugAndOwner($slug, $owner_id) {
      $q = $this
        ->createQuery('s')
        ->leftJoin('s.ServerGroup sg')
        ->where('s.status = ?', Server::STATUS_NOT_VERIFIED)
        ->andWhere('sg.owner_player_id = ?', $owner_id)
        ->andWhere('sg.slug = ?', $slug)
        ->orWhere('s.slug = ?', $slug);
       return $q->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD);
    }
    
    /**
      Finds a server in need of verifying by its group slug and server slug.
    */
    public function findVerifyServerBySlugsAndOwner($group_slug, $server_slug, $owner_id) {
      $q = $this
        ->createQuery('s')
        ->leftJoin('s.ServerGroup sg')
        ->where('s.status = ?', Server::STATUS_NOT_VERIFIED)
        ->andWhere('sg.owner_player_id = ?', $owner_id)
        ->andWhere('sg.slug = ?', $group_slug)
        ->andWhere('s.slug = ?', $server_slug);
       return $q->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD);
    }
    
    public function findServerBySlugAndOwner($slug, $owner_id) {
      $q = $this
        ->createQuery('s')
        ->leftJoin('s.ServerGroup sg')
        ->where('s.status != ?', Server::STATUS_INACTIVE)
        ->andWhere('sg.owner_player_id = ?', $owner_id)
        ->andWhere('sg.slug = ?', $slug)
        ->orWhere('s.slug = ?', $slug);
       return $q->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD);
    }
    
    /**
      Gets a server object for the given slug. server_slug is required, group_slug is required only for multi groups.
    */
    public function findServerBySlug($server_slug, $group_slug = null) {
      $q = $this
        ->createQuery('s')
        ->leftJoin('s.ServerGroup sg');
        
      if($group_slug) {
        $group_type = ServerGroup::GROUP_TYPE_MULTI_SERVER;
        $q->where('sg.group_type = ?', $group_type)
          ->andWhere('sg.slug = ?', $group_slug)
          ->andWhere('s.slug = ?', $server_slug);
      } else {
        $group_type = ServerGroup::GROUP_TYPE_SINGLE_SERVER;
        $q->where('sg.group_type = ?', $group_type)
          ->andWhere('sg.slug = ?', $server_slug)
          ->orWhere('s.slug = ?', $server_slug);
      }
        
      return $q->fetchOne(array(), Doctrine_Core::HYDRATE_RECORD);
    }
}
