<?php

/**
 * Event
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    tf2logs
 * @subpackage model
 * @author     Brian Barnekow
 */
class Event extends BaseEvent {  
  public static function kill($elapsedSeconds, $weaponId, $attackerPlayerId, $attackerCoord, $victimPlayerId, $victimCoord) {
    return array(
      'event_type' => "kill",
      'elapsed_seconds' => $elapsedSeconds,
      'attacker_player_id' => $attackerPlayerId,
      'attacker_coord' => $attackerCoord,
      'victim_player_id' => $victimPlayerId,
      'victim_coord' => $victimCoord,
      'weapon_id' => $weaponId
    );
  }
  
  public static function assist(&$e, $assistPlayerId, $assistCoord) {
    $e['assist_player_id'] = $assistPlayerId;
    $e['assist_coord'] = $assistCoord;
  }
  
  public static function chat($elapsedSeconds, $chatType, $playerId, $text) {
    return array(
      'elapsed_seconds' => $elapsedSeconds,
      'event_type' => $chatType,
      'chat_player_id' => $playerId,
      'text' => $text
    );
  }
  
  public static function pointCapture($elapsedSeconds, $playerIds, $team, $capturePoint) {
    $e = array(
      'elapsed_seconds' => $elapsedSeconds,
      'event_type' => 'pointCap',
      'team' => strtolower($team),
      'capture_point' => $capturePoint
    );
    if($playerIds && count($playerIds) > 0) {
      $e['EventPlayer'] = array();
      foreach($playerIds as $id) {
        $ep = array(
          'event_player_type' => 'C',
          'player_id' => $id
        );
        $e['EventPlayer'][] = $ep;
      }
    }
    return $e;
  }
  
  public static function roundStart($elapsedSeconds, $blueScore, $redScore) {
    return array(
      'elapsed_seconds' => $elapsedSeconds,
      'event_type' => 'rndStart',
      'blue_score' => $blueScore,
      'red_score' => $redScore
    );
  }
  
  public static function scoreChange($elapsedSeconds, $blueScore, $redScore) {
    return array(
      'elapsed_seconds' => $elapsedSeconds,
      'event_type' => 'scrChng',
      'blue_score' => $blueScore,
      'red_score' => $redScore
    );
  }
}
