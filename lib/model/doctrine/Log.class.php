<?php

/**
 * Log
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    tf2logs
 * @subpackage model
 * @author     Brian Barnekow
 */
class Log extends BaseLog
{
  protected $_timeStart;
  protected $_scrubbedLog = "";
  
  public function set_timeStart($timeStart) {
    $this->_timeStart = $timeStart;
  }
  
  public function get_timeStart() {
    return $this->_timeStart;
  }
  
  public function appendToScrubbedLog($logLine) {
    if($this->getLogFile() == null) $this->setLogFile(new LogFile());
    $this->getLogFile()->appendString($logLine);
  }
  
  
  /**
  * Adds a stat record for the given player, if unique.
  */
  public function addUpdateUniqueStatFromPlayerInfo(PlayerInfo $playerInfo) {
    $addStat = true;
    foreach($this->Stats as &$stat) {
      if($stat->equalsPlayerInfo($playerInfo)) {
        //no need to add, but will update here.
        if($playerInfo->getTeam() == null) {
          $playerInfo->setTeam($stat->getTeam());
        }
        $stat->setPlayerInfoAttributes($playerInfo);
        $addStat = false;
        break;
      }
    }
    
    //no need to track the console's stats, and do not add a player unless an ingame action occurs
    if($addStat && $playerInfo->getSteamid() != "Console" && $playerInfo->getTeam() != null) {
      $stat = new Stat();
      $stat->setPlayerInfoAttributes($playerInfo);
      $this->Stats[] = $stat;
    }
  }
  
  /**
  * For an array of given PlayerInfo objects, will add the unique players.
  */
  public function addUpdateUniqueStatsFromPlayerInfos($playerInfos) {
    foreach($playerInfos as $key => $pi) {
      if(!($pi instanceof PlayerInfo)) {
        throw new InvalidArgumentException("playerInfos given to addUniqueStatsFromPlayerInfos must be of PlayerInfo type.");
      }
      
      $this->addUpdateUniqueStatFromPlayerInfo($pi);
    }
  }
  
  public function incrementStatFromSteamid($steamid, $statkey, $increment = 1) {
    $stat = &$this->getStatFromSteamid($steamid);
    if($stat === false) throw new InvalidArgumentException("steamid could not be found in incrementStatFromSteamid: $steamid, $statkey");
    $stat->incrementStat($statkey, $increment);
  }
  
  /**
  * Sets the given team's score to the given value.
  */
  public function setScoreForTeam($team, $score) {
    if($team == "Red") $this->setRedscore($score);
    else if($team == "Blue") $this->setBluescore($score);
    else throw new InvalidArgumentException("Invalid team '$team' given to setScoreForTeam method.");
  }
  
  /**
  * Gets a stat by reference by steamid. Protected since 
  * allowing the end user of the class to update the stat
  * outside of this class is unwise.
  */
  protected function &getStatFromSteamid($steamid) {
    foreach($this->Stats as &$stat) {
      if($stat->getSteamid() == $steamid) {
        return $stat;
      }
    }
    
    return false;
  }
}
