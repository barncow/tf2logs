<?php

/**
 * Log
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    tf2logs
 * @subpackage model
 * @author     Brian Barnekow
 */
class Log extends BaseLog
{
  protected $_timeStart;
  protected $_scrubbedLog = "";
  
  public function set_timeStart($timeStart) {
    $this->_timeStart = $timeStart;
  }
  
  public function get_timeStart() {
    return $this->_timeStart;
  }
  
  public function appendToScrubbedLog($logLine) {
    if($this->getLogFile() == null) $this->setLogFile(new LogFile());
    $this->getLogFile()->appendString($logLine);
  }
  
  
  /**
  * Adds a stat record for the given player, if unique.
  */
  public function addUpdateUniqueStatFromPlayerInfo(PlayerInfo $playerInfo) {
    $addStat = true;
    foreach($this->Stats as &$stat) {
      if($stat->equalsPlayerInfo($playerInfo)) {
        //no need to add, but will update here.
        
        //if the player is now on team null (discon, spec, etc) keep old team designation.
        if($playerInfo->getTeam() == null) {
          $playerInfo->setTeam($stat->getTeam());
        }
        
        $stat->setPlayerInfoAttributes($playerInfo);
        $addStat = false;
        break;
      }
    }
    
    //no need to track the console's stats, and do not add a player unless an ingame action occurs
    if($addStat && $playerInfo->getSteamid() != "Console" && $playerInfo->getTeam() != null) {
      $stat = new Stat();
      $stat->setPlayerInfoAttributes($playerInfo);
      $this->Stats[] = $stat;
    }
  }
  
  /**
  * For an array of given PlayerInfo objects, will add the unique players.
  */
  public function addUpdateUniqueStatsFromPlayerInfos($playerInfos) {
    foreach($playerInfos as $key => $pi) {
      if(!($pi instanceof PlayerInfo)) {
        throw new InvalidArgumentException("playerInfos given to addUniqueStatsFromPlayerInfos must be of PlayerInfo type.");
      }
      
      $this->addUpdateUniqueStatFromPlayerInfo($pi);
    }
  }
  
  public function incrementStatFromSteamid($steamid, $statkey, $increment = 1) {
    $stat = &$this->getStatFromSteamid($steamid);
    if($stat === false) throw new InvalidArgumentException("steamid could not be found in incrementStatFromSteamid: $steamid, $statkey");
    $stat->incrementStat($statkey, $increment);
  }
  
  /**
  * Sets the given team's score to the given value.
  */
  public function setScoreForTeam($team, $score) {
    if($team == "Red") $this->setRedscore($score);
    else if($team == "Blue") $this->setBluescore($score);
    else throw new InvalidArgumentException("Invalid team '$team' given to setScoreForTeam method.");
  }
  
  /**
  * This will add the weapon to the steamid.
  */
  public function incrementWeaponForPlayer($steamid, $weapon, $propertyToIncrement, $increment = 1) {
    $stat = &$this->getStatFromSteamid($steamid);
    if($stat === false) throw new InvalidArgumentException("steamid could not be found in addWeaponToSteamid: $steamid, $weapon");
    $stat->incrementWeaponForPlayer($weapon, $propertyToIncrement, $increment);
  }
  
  /**
  * This will add the role to the steamid.
  */
  public function addRoleToSteamid($steamid, $role, $nowDt, $logStartDt) {
    $stat = &$this->getStatFromSteamid($steamid);
    if($stat === false) throw new InvalidArgumentException("steamid could not be found in addRoleToSteamid: $steamid, $role, $nowDt, $logStartDt");
    $stat->addRoleToPlayer($role, $nowDt, $logStartDt);
  }
  
  public function addPlayerStatToSteamid($attackerSteamid, $otherSteamid, $propertyToIncrement, $increment = 1) {
    $attackerStat = &$this->getStatFromSteamid($attackerSteamid);
    $otherStat = $this->getStatFromSteamid($otherSteamid);
    if($attackerStat === false || $otherStat === false) throw new InvalidArgumentException("steamid could not be found in addPlayerStatToSteamid: $attackerSteamid,  $otherSteamid, $propertyToIncrement, $increment");
    $attackerStat->addPlayerStat($otherStat->getPlayer(), $propertyToIncrement, $increment);
  }
  
  public function addKillEvent($elapsedSeconds, $attackerSteamid, $attackerCoord, $victimSteamid, $victimCoord) {
    $e = new Event();
    $attackerStat = $this->getStatFromSteamid($attackerSteamid);
    $victimStat = $this->getStatFromSteamid($victimSteamid);
    $e->kill($elapsedSeconds, $attackerStat->getPlayer(), $attackerCoord, $victimStat->getPlayer(), $victimCoord);
    $this->Events[] = $e;
  }
  
  public function addPointCaptureEvent($elapsedSeconds, $players, $team, $capturePoint) {
    $e = new Event();
    $pids = array();
    foreach($players as $p) {
      $stat = $this->getStatFromSteamid($p->getSteamid());
      $pids[] = $stat->getPlayer()->getId();
    }
    
    $e->pointCapture($elapsedSeconds, $pids, $team, $capturePoint);
    $this->Events[] = $e;
  }
  
  public function addChatEvent($elapsedSeconds, $chatType, $chatPlayer, $text) {
    $e = new Event();
    $chatStat = $this->getStatFromSteamid($chatPlayer->getSteamid());
    if($chatStat == null) {
      $this->addUpdateUniqueStatFromPlayerInfo($chatPlayer);
      $chatStat = $this->getStatFromSteamid($chatPlayer->getSteamid());
    }
    
    //if we still don't have a chatStat, its because it could not be added, due to it being Console or not on team.
    if($chatStat != null) {
      $e->chat($elapsedSeconds, $chatType, $chatStat->getPlayer(), $text);
      $this->Events[] = $e;
    }
  }
  
  public function addRoundStartEvent($elapsedSeconds, $blueScore, $redScore) {
    $e = new Event();
    $e->roundStart($elapsedSeconds, $blueScore, $redScore);
    $this->Events[] = $e;
  }
  
  /**
  * Used to perform any last cleanup work.
  */
  public function finishLog($nowDt, $logStartDt) {
    //call finishStat for all stats.
    foreach($this->Stats as &$stat) {
      $stat->finishStat($nowDt, $logStartDt);
    }
    
    //update player avatar for stats.
    $steamids = array();
    foreach($this->Stats as $stat) {
      $steamids[] = $stat->getPlayer()->getNumericSteamid();
    }
    $swapi = new SteamWebAPI();
    $a = $swapi->getAvatarUrlsFromSteamids($steamids);
    foreach($this->Stats as &$stat) {
      foreach($a as $avatarurl) {
        $steamid = array_keys($avatarurl);
        $steamid = $steamid[0];
        if($stat->getPlayer()->getNumericSteamid() == $steamid) {
          $url = $avatarurl[$steamid];
          $swapi->downloadAvatar($url, $stat->getPlayer()->getId());
          break;
        }
      }
    }
  }
  
  public function finishStatForSteamid($steamid, $nowDt, $logStartDt) {
    $stat = &$this->getStatFromSteamid($steamid);
    if($stat !== false) $stat->finishStat($nowDt, $logStartDt);
  }
  
  public function clearStats() {
    $this->Stats->delete();
  }
  
  public function clearEvents() {
    $this->Events->delete();
  }
  
  /**
  * Gets a stat by reference by steamid. Protected since 
  * allowing the end user of the class to update the stat
  * outside of this class is unwise.
  */
  protected function &getStatFromSteamid($steamid) {
    foreach($this->Stats as &$stat) {
      if($stat->getPlayer()->getSteamid() == $steamid) {
        return $stat;
      }
    }
    
    return false;
  }
}
