<?php

/**
 * LogTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LogTable extends Doctrine_Table {
    /**
     * Returns an instance of this class.
     *
     * @return object LogTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Log');
    }
    
    public function getLogById($id) {
      $l = $this
        ->createQuery('l')
        ->where('l.id = ?', $id)
        ->andWhere('l.error_log_name is null')
        ->execute();
     
      if(count($l) == 0) return null;
      return $l[0]; //returns doctrine_collection obj, we only want first (all we should get)
    }
    
    public function getLogForRegenerationById($id) {
      $l = $this
        ->createQuery('l')
        ->where('l.id = ?', $id)
        ->execute();
     
      if(count($l) == 0) return null;
      return $l[0]; //returns doctrine_collection obj, we only want first (all we should get)
    }
    
    public function getLogByIdAsArray($id) {
      $l = $this
        ->createQuery('l')
        ->where('l.id = ?', $id)
        ->leftJoin('l.Submitter sr')
        ->leftJoin('l.Stats s')
        ->leftJoin('s.Player p')
        ->leftJoin('s.Weapons w')
        ->leftJoin('s.RoleStats rs')
        ->leftJoin('rs.Role r')
        ->andWhere('l.error_log_name is null')
        ->orderBy('s.team asc, s.name asc, rs.time_played desc')
        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
        ->execute();
     
      if(count($l) == 0) return null;
      return $l[0]; //returns doctrine_collection obj, we only want first (all we should get)
    }
    
    public function getLiveLogFromServerSlugsAsArray($server_slug, $group_slug = null) {
      $l = $this
        ->createQuery('l')
        ->leftJoin('l.Submitter sr')
        ->leftJoin('l.Stats s')
        ->leftJoin('l.Server srv')
        ->leftJoin('srv.ServerGroup sg')
        ->leftJoin('s.Player p')
        ->leftJoin('s.Weapons w')
        ->leftJoin('s.RoleStats rs')
        ->leftJoin('rs.Role r')
        ->where('l.error_log_name is null')
        ->andWhere('l.is_live = ?', true)
        ->orderBy('s.team asc, s.name asc, rs.time_played desc')
        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
        
      if($group_slug) {
        $group_type = ServerGroup::GROUP_TYPE_MULTI_SERVER;
        $l->andWhere('sg.group_type = ?', $group_type)
          ->andWhere('sg.slug = ?', $group_slug)
          ->andWhere('srv.slug = ?', $server_slug);
      } else {
        $group_type = ServerGroup::GROUP_TYPE_SINGLE_SERVER;
        $l->andWhere('sg.group_type = ?', $group_type)
          ->andWhere('sg.slug = ?', $server_slug)
          ->orWhere('srv.slug = ?', $server_slug);
      }
      
      $l = $l->execute();
     
      if(count($l) == 0) return null;
      return $l[0]; //returns doctrine_collection obj, we only want first (all we should get)
    }
    
    public function getErrorLogById($id) {
      $l = $this
        ->createQuery('l')
        ->where('l.id = ?', $id)
        ->andWhere('l.error_log_name is not null')
        ->execute();
     
      if(count($l) == 0) return null;
      return $l[0]; //returns doctrine_collection obj, we only want first (all we should get)
    }
    
    public function listErrorLogs() {
      return $this
        ->createQuery('l')
        ->where('l.error_log_name is not null')
        ->orderBy('l.created_at ASC')
        ->execute();
    }
    
    public function deleteLog($log_id) {
      $this->createQuery('l')
        ->delete('Log l')
        ->where('l.id = ?', $log_id)
        ->execute();
    }
    
    public function getMostRecentLogs($num_to_retrieve = 10) {
      return $this
        ->createQuery('l')
        ->where('l.error_log_name is null')
        ->andWhere('l.server_id is null')
        ->orderBy('l.created_at DESC')
        ->limit($num_to_retrieve)
        ->execute();
    }
    
    public function getTopViewedLogs($num_to_retrieve = 10, $prev_days = 7) {
      $days_ago_dt = new DateTime();
      $days_ago_dt->sub(new DateInterval('P'.$prev_days.'D'));
      $dtstring = $days_ago_dt->format('Y-m-d 00:00:00');
      return $this
        ->createQuery('l')
        ->where('l.error_log_name is null')
        ->andWhere('l.created_at >= ?', $dtstring)
        ->andWhere('l.is_live = ?', false) //doing is not live here since we want all top viewed logs
        ->orderBy('l.views DESC')
        ->limit($num_to_retrieve)
        ->execute();
    }
    
    public function getTopViewedLogsForServerGroup($group_slug, $server_slug = null, $num_to_retrieve = 10, $prev_days = 7) {
      $days_ago_dt = new DateTime();
      $days_ago_dt->sub(new DateInterval('P'.$prev_days.'D'));
      $dtstring = $days_ago_dt->format('Y-m-d 00:00:00');
      $q = $this
        ->createQuery('l')
        ->leftJoin('l.Server s')
        ->leftJoin('s.ServerGroup sg')
        ->where('l.error_log_name is null')
        ->andWhere('l.created_at >= ?', $dtstring)
        ->andWhere('sg.slug = ?', $group_slug)
        ->andWhere('l.is_live = ?', false)
        ->orderBy('l.views DESC')
        ->limit($num_to_retrieve);
        
        if($server_slug) {
          $q->andWhere('s.slug = ?', $server_slug);
        }
        
        return $q->execute();
    }
    
    public function getMostRecentLogsForServerGroup($group_slug, $server_slug = null, $num_to_retrieve = 10) {
      $q = $this
        ->createQuery('l')
        ->leftJoin('l.Server s')
        ->leftJoin('s.ServerGroup sg')
        ->where('l.error_log_name is null')
        ->andWhere('sg.slug = ?', $group_slug)
        ->andWhere('l.is_live = ?', false)
        ->orderBy('l.created_at DESC')
        ->limit($num_to_retrieve);
        
      if($server_slug) {
        $q->andWhere('s.slug = ?', $server_slug);
      }
      
      return $q->execute();
    }
    
    //retrieves logs that the user participated in, not submitted
    public function getParticipantLogsByPlayerNumericSteamidQuery($playerId) {
      return $this
        ->createQuery('l')
        ->leftJoin('l.Stats s')
        ->leftJoin('s.Player p')
        ->where('p.numeric_steamid = ?', $playerId)
        ->andWhere('l.error_log_name is null')
        ->orderBy('l.created_at desc')
        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
    }
    
    //retrieves logs that the user submitted in, not necessarily just played in
    public function getSubmittedLogsByPlayerNumericSteamidQuery($playerId) {
      return $this
        ->createQuery('l')
        ->leftJoin('l.Submitter p')
        ->where('p.numeric_steamid = ?', $playerId)
        ->andWhere('l.error_log_name is null')
        ->orderBy('l.created_at desc')
        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
    }
    
    public function getSubmittedLogsByPlayerIdQuery($playerId) {
      return $this
        ->createQuery('l')
        ->leftJoin('l.Submitter p')
        ->where('p.id = ?', $playerId)
        ->andWhere('l.error_log_name is null')
        ->orderBy('l.created_at desc')
        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
    }
    
    public function getNumberSubmittedLogsByPlayerNumericSteamid($playerId) {
      $p = Doctrine_Query::create()
      ->select('count(l.id) as num_logs')
      ->from('Log l')
      ->leftJoin('l.Submitter p')
      ->where('p.numeric_steamid = ?', $playerId)
      ->andWhere('l.error_log_name is null')
      ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
      ->execute();
      if(count($p) != 1) return 0;
      return $p[0]['num_logs'];
    }
    
    //retrieves an array of distinct maps
    //first variable allows you to put in an array to prepopulate (for instance, a blank Pick One value)
    //you can optionally put in a seedMaps variable.
    //This allows you to return more maps (unique and sorted)
    //than there currently are in the DB.
    //$seedMaps should follow same structure as return value.
    public function getMapsAsList(&$ret = array(), $seedMaps = null) {
      $m = Doctrine_Query::create()
      ->select('l.map_name as map_name')
      ->from('Log l')
      ->where('l.map_name is not null')
      ->distinct(true)
      ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR)
      ->orderBy('l.map_name asc')
      ->execute();
      if(!is_array($m)){
        $ret[$m] = $m;
      } else {
        foreach($m as $map) {
          $ret[$map] = $map;
        }
      }
      if($seedMaps != null && count($seedMaps)) {
        $ret = array_merge($ret, $seedMaps);
        sort($ret);
      }
      return $ret;
    }
    
    //retrieves logs based on search criteria
    public function getLogsFromSearch($logName, $mapName, $fromDate, $toDate) {
      $q = $this
        ->createQuery('l')
        ->orderBy('l.created_at desc, l.name asc')
        ->where('l.error_log_name is null')
        ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
      if($logName && strlen($logName) > 0) {
        $q->andWhere('l.name LIKE ?', '%'.$logName.'%');
      }
      
      if($mapName && strlen($mapName) > 0) {
        $q->andWhere('l.map_name = ?', $mapName);
      }
      
      if($fromDate && strlen($fromDate) > 0) {
        $q->andWhere('l.created_at >= ?', $fromDate);
      }
      
      if($toDate && strlen($toDate) > 0) {
        //add one to the date in order to compare all dates and times before this date.
        $toDate = date("Y-m-d", strtotime($toDate." +1 day"));
        $q->andWhere('l.created_at < ?', $toDate);
      }
      
      $q->orderBy("l.name, l.created_at asc");
        
      return $q;
    }
    
    public function incrementViews($id, $increment = 1) {
      return Doctrine_Query::create()
        ->update('Log')
        ->set('views', 'views + ?', $increment)
        ->where('id = ?', $id)
        ->execute();
    }
    
    public function getMaxLogId() {
     $q = $this
        ->createQuery('l')
        ->select('max(l.id)')
        ->where('l.error_log_name is null');

      return $q->fetchOne(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
    }
}
